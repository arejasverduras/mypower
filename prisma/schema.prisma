generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?   @unique
  image         String?   // Profile picture URL from Google
  bio           String?
  quote         String?   @default("Push it to the limit!")
  isSuperuser   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  createdExercises Exercise[]
  createdWorkouts  Workout[]
  createdPrograms  Program[]
  likedItems       LikedItem[]
  exerciseResults  ExerciseResult[]
  workoutCompletions WorkoutCompletion[]
  programCompletions ProgramCompletion[]

  // OAuth
  accounts    Account[] // Relation for OAuth accounts
  sessions    Session[] // Relation for user sessions
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) // Enforce unique accounts per provider
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  id           String   @id @default(cuid())
  identifier   String
  token        String   @unique
  expires      DateTime
}

model Exercise {
  id          String    @id @default(cuid())
  title       String
  image       String?
  description String?
  execution   String?
  video       String?
  tags        Tag[]     @relation("ExerciseTags")
  isPublic    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade) 
  createdById String
  createdAt   DateTime  @default(now())
  likedBy     LikedItem[]
  workouts    WorkoutExercise[] // Many-to-Many via intermediate table
}

model Workout {
  id          String    @id @default(cuid())
  title       String
  description String?
  exercises   WorkoutExercise[] // Many-to-Many via intermediate table
  tags        Tag[]     @relation("WorkoutTags")
  isPublic    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  likedBy     LikedItem[]
  programs    ProgramWorkout[] // Many-to-Many via intermediate table
}

model Program {
  id          String    @id @default(cuid())
  title       String
  description String?
  workouts    ProgramWorkout[]
  tags        Tag[]     @relation("ProgramTags")
  isPublic    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  likedBy     LikedItem[]
  results     ProgramCompletion[]
}

// Intermediate table for Many-to-Many relationship
model WorkoutExercise {
  id                String    @id @default(cuid())
  workout           Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade) // ✅ Auto-delete from workouts
  workoutId         String
  exercise          Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade) // ✅ Auto-delete from exercises
  exerciseId        String
  customDescription String?
  customSets        Int?
  customRepetitions String?
  customBreak       String?   // Break between sets
  customExecution   String?   // Custom execution instructions
  customRest        String?   // Rest between exercises (to be implemented later)
  order             Int       // Order of the exercise in the workout
  results           ExerciseResult[] // One-to-Many relationship

  // Composite key to enforce unique pairing of workout and exercise
  @@unique([workoutId, exerciseId])
}

// Intermediate table for Many-to-Many relationship
model ProgramWorkout {
  id          String    @id @default(cuid())
  program     Program   @relation(fields: [programId], references: [id])
  programId   String
  workout     Workout   @relation(fields: [workoutId], references: [id])
  workoutId   String
  results     WorkoutCompletion[]
  @@unique([programId, workoutId]) // Prevent duplicate program-workout pairings
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  exercises Exercise[] @relation("ExerciseTags")
  workouts  Workout[]  @relation("WorkoutTags")
  programs  Program[]  @relation("ProgramTags")
}

model LikedItem {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  exercise    Exercise? @relation(fields: [exerciseId], references: [id], onDelete: Cascade) // ✅ Deletes LikedItems when Exercise is deleted
  exerciseId  String?
  workout     Workout?  @relation(fields: [workoutId], references: [id], onDelete: Cascade) // ✅ Deletes LikedItems when Workout is deleted
  workoutId   String?
  program     Program?  @relation(fields: [programId], references: [id], onDelete: Cascade) // ✅ Deletes LikedItems when Program is deleted
  programId   String?
}


model ExerciseResult {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId String
  sets            Int
  reps            Int
  weight          Float?
  notes           String?
  createdAt       DateTime  @default(now())
}

model WorkoutCompletion {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  programWorkout ProgramWorkout @relation(fields: [programWorkoutId], references: [id])
  programWorkoutId String
  completedAt    DateTime  @default(now())
  notes          String?
}

model ProgramCompletion {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  program     Program   @relation(fields: [programId], references: [id])
  programId   String
  completedAt DateTime  @default(now())
  notes       String?
}

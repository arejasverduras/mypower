// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int       @id @default(autoincrement())
  googleId    String    @unique // Google OAuth2 unique identifier
  email       String    @unique
  name        String?
  image       String?   // Profile picture URL from Google
  isSuperuser Boolean   @default(false)
  createdAt   DateTime @default(now()) // Track when the user was created
  updatedAt   DateTime @updatedAt      // Track the last time the user was updated
  
  // Relations
  createdExercises Exercise[]
  createdWorkouts  Workout[]
  createdPrograms  Program[]
  likedItems       LikedItem[]
  exerciseResults  ExerciseResult[]
  workoutCompletions WorkoutCompletion[]
  programCompletions ProgramCompletion[]

  // OAuth
  accounts    Account[] // Relation for OAuth accounts
  sessions    Session[] // Relation for user sessions
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  // OAuth refresh token
  access_token       String?  // OAuth access token
  expires_at         Int?     // OAuth token expiration
  token_type         String?  // OAuth token type
  scope              String?  // OAuth scopes
  id_token           String?  // OpenID Connect ID Token
  session_state      String?  // OAuth session state
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) // Enforce unique accounts per provider
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  id         Int       @id @default(autoincrement())
  identifier String    // Email address or phone number
  token      String    @unique
  expires    DateTime
}

model Exercise {
  id          Int       @id @default(autoincrement())
  title       String
  image       String?                                // Optional (Image URL)
  description String?
  execution   String?                                // Optional (Text description)
  video       String?
  tags        Tag[]     @relation("ExerciseTags")
  isPublic    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int 
  createdAt   DateTime @default(now())               // Auto-generated timestamp
  likedBy     LikedItem[]
  workouts    WorkoutExercise[] // Many-to-Many via intermediate table
}
// unique description for each exercise in a workout ?

model Workout {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  exercises   WorkoutExercise[] // Many-to-Many via intermediate table
  tags        Tag[]     @relation("WorkoutTags")
  isPublic    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  likedBy     LikedItem[]
  programs    ProgramWorkout[] // Many-to-Many via intermediate table
}

// unique description for each exercise in a workout ?

model Program {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  workouts    ProgramWorkout[]
  tags        Tag[]     @relation("ProgramTags")
  isPublic    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  likedBy     LikedItem[]
  results     ProgramCompletion[]
}

// Intermediate table for Many-to-Many relationship
model WorkoutExercise {
  id                Int       @id @default(autoincrement())
  workout           Workout   @relation(fields: [workoutId], references: [id])
  workoutId         Int
  exercise          Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId        Int
  customDescription String?   // Custom description for this exercise in this workout
  customSets        Int?
  customRepetitions String?
  results           ExerciseResult[] // One-to-Many relationship


  // Composite key to enforce unique pairing of workout and exercise
  @@unique([workoutId, exerciseId])
}

// Intermediate table for Many-to-Many relationship
model ProgramWorkout {
  id          Int       @id @default(autoincrement())
  program     Program   @relation(fields: [programId], references: [id])
  programId   Int
  workout     Workout   @relation(fields: [workoutId], references: [id])
  workoutId   Int
  results     WorkoutCompletion[]
  @@unique([programId, workoutId]) // Prevent duplicate program-workout pairings
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  exercises Exercise[] @relation("ExerciseTags")
  workouts  Workout[] @relation("WorkoutTags")
  programs  Program[] @relation("ProgramTags")
}

model LikedItem {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  exercise    Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId  Int?
  workout     Workout?  @relation(fields: [workoutId], references: [id])
  workoutId   Int?
  program     Program?  @relation(fields: [programId], references: [id])
  programId   Int?
}

model ExerciseResult {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId     Int
  sets          Int         // Number of sets performed
  reps          Int         // Number of reps per set
  weight        Float?      // Optional weight lifted
  notes         String?     // User's notes for this exercise
  createdAt     DateTime    @default(now())
}

model WorkoutCompletion {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  programWorkout ProgramWorkout @relation(fields: [programWorkoutId], references: [id])
  programWorkoutId   Int
  completedAt DateTime  @default(now())
  notes       String?   // User notes (optional)
}

model ProgramCompletion {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  programWorkout     Program   @relation(fields: [programWorkoutId], references: [id])
  programWorkoutId   Int
  completedAt DateTime  @default(now())
  notes       String?   // User notes (optional)
}